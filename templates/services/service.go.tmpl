// Code generated by hedone, DO NOT EDIT.
package services

import (
	"context"

	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	"gorm.io/gorm"

	pb "{{ .Extra.protopkg }}/gen/go/{{ .Extra.package }}/v1"
	"{{ .Extra.pkgpath }}/models"
	"{{ .Extra.pkgpath }}/repositories"
)

{{- $extra := .Extra}}
{{- $modelName := .Name}}
{{- $modelNameCamel := .NameCamel}}
{{- $modelNameCamelPlural := .NameCamelPlural}}
{{- $modelNameLowerCamelPlural := .NameLowerCamelPlural}}
{{- $modelNameLowerCamel := .NameLowerCamel}}
{{- $primaryKeyField := .PrimaryKeyField}}

func (s *{{ $extra.servicename }}Service) List{{ $modelNameCamelPlural }}(ctx context.Context, req *pb.List{{ $modelNameCamelPlural }}Request) (*pb.List{{ $modelNameCamelPlural }}Response, error) {
	if req == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$primaryKeyField.NameLowerCamel}} is not provided")
	}

    {{ $modelNameLowerCamelPlural }}, nextPageToken, totalCount, err := s.repo.List{{ $modelNameCamelPlural }}(ctx, req.Parent, req.Filter, req.OrderBy, req.PageSize, req.PageToken)

	if err != nil {
		return nil, err
	}

	pb{{ $modelNameCamelPlural }} := make([]*pb.{{ $modelNameCamel }}, 0, len({{ $modelNameLowerCamelPlural }}))
	for _, {{ $modelNameLowerCamel }} := range {{ $modelNameLowerCamelPlural }} {
		pb{{ $modelNameCamelPlural }} = append(pb{{ $modelNameCamelPlural }}, {{ $modelNameLowerCamel }}.ToPB())
	}

	var resp pb.List{{ $modelNameCamelPlural }}Response
	resp.{{ $modelNameCamelPlural }} = pb{{ $modelNameCamelPlural }}
	resp.NextPageToken = nextPageToken
	resp.TotalCount = int32(totalCount)

	return &resp, nil
}

func (s *{{ $extra.servicename }}Service) Create{{ $modelNameCamel }}(ctx context.Context, req *pb.Create{{ $modelNameCamel }}Request) (*pb.{{ $modelNameCamel }}, error) {
	if req == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$primaryKeyField.NameLowerCamel}} is not provided")
	}

	{{ $modelNameLowerCamel }} := &models.{{ $modelNameCamel }}{}
	{{ $modelNameLowerCamel }} = {{ $modelNameLowerCamel }}.ToORM(req.Get{{ $modelNameCamel }}())

	{{ $modelNameLowerCamel }}, err := s.repo.Create{{ $modelNameCamel }}(ctx, {{ $modelNameLowerCamel }})

	if err != nil {
		return nil, err
	}

	return {{ $modelNameLowerCamel }}.ToPB(), nil
}

{{- range .Fields}}
{{- if or .IsPrimaryKey .IsUnique }}
	func (s *{{ $extra.servicename }}Service) Get{{ $modelNameCamel }}By{{ .NameCamel }}(ctx context.Context, req *pb.Get{{ $modelNameCamel }}By{{ .NameCamel }}Request) (*pb.{{ $modelNameCamel }}, error) {
		var (
			withEdges bool
		)

		if req == nil || req.{{ .NameCamel }} == "" {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{ .NameLowerCamel }} is not provided")
		}

		switch req.GetView() {
		case pb.Get{{ $modelNameCamel }}By{{ .NameCamel }}Request_VIEW_UNSPECIFIED, pb.Get{{ $modelNameCamel }}By{{ .NameCamel }}Request_BASIC:
		case pb.Get{{ $modelNameCamel }}By{{ .NameCamel }}Request_WITH_EDGES:
			withEdges = true
		default:
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: unknown view")
		}

		{{ $modelNameLowerCamel }}, err := s.repo.Get{{ $modelNameCamel }}By{{ .NameCamel }}(ctx, req.{{ .NameCamel }}, withEdges)
		if err != nil {
			return nil, err
		}
		return {{ $modelNameLowerCamel }}.ToPB(), nil
	}
{{- end}}
{{- end}}

func (s *{{ $extra.servicename }}Service) Update{{ $modelNameCamel }}(ctx context.Context, req *pb.Update{{ $modelNameCamel }}Request) (*pb.{{ $modelNameCamel }}, error) {

	if req == nil || req.{{ $modelNameCamel }} == nil || req.{{ $modelNameCamel }}.{{$primaryKeyField.NameCamel}} == "" {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$primaryKeyField.NameLowerCamel}} is not provided")
	}

	{{ $modelNameLowerCamel }} := &models.{{ $modelNameCamel }}{}
	{{ $modelNameLowerCamel }} = {{ $modelNameLowerCamel }}.ToORM(req.Get{{ $modelNameCamel }}())

	{{ $modelNameLowerCamel }}, err := s.repo.Update{{ $modelNameCamel }}(ctx, {{ $modelNameLowerCamel }})
	if err != nil {
		return nil, err
	}
	return {{ $modelNameLowerCamel }}.ToPB(), nil
}

func (s *{{ $extra.servicename }}Service) Delete{{ $modelNameCamel }}(ctx context.Context, req *pb.Delete{{ $modelNameCamel }}Request) (*emptypb.Empty, error) {

	if req == nil || req.{{$primaryKeyField.NameCamel}} == "" {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$primaryKeyField.NameLowerCamel}} is not provided")
	}

	_, err := s.repo.Delete{{ $modelNameCamel }}(ctx, req.{{$primaryKeyField.NameCamel}})
	if err != nil {
		return nil, err
	}
	return &emptypb.Empty{}, nil
}
